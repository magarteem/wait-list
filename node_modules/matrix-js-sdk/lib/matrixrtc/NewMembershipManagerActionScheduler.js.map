{"version":3,"file":"NewMembershipManagerActionScheduler.js","names":["logger","rootLogger","sleep","MembershipActionType","getChild","ActionScheduler","constructor","membershipLoopHandler","_defineProperty","update","error","actions","_actions","startWithJoin","_this","_asyncToGenerator","running","ts","Date","now","type","SendDelayedEvent","_loop","sort","a","b","nextAction","wakeupUpdate","undefined","wakeupPromise","Promise","resolve","wakeup","race","handlerResult","debug","concat","e","Error","splice","actionUpdate","replace","push","insert","length","initiateJoin","_this$wakeup","call","initiateLeave","_this$wakeup2","SendScheduledDelayedLeaveEvent"],"sources":["../../src/matrixrtc/NewMembershipManagerActionScheduler.ts"],"sourcesContent":["import { logger as rootLogger } from \"../logger.ts\";\nimport { type EmptyObject } from \"../matrix.ts\";\nimport { sleep } from \"../utils.ts\";\nimport { MembershipActionType } from \"./NewMembershipManager.ts\";\n\nconst logger = rootLogger.getChild(\"MatrixRTCSession\");\n\n/** @internal */\nexport interface Action {\n    /**\n     * When this action should be executed\n     */\n    ts: number;\n    /**\n     * The state of the different loops\n     * can also be thought of as the type of the action\n     */\n    type: MembershipActionType;\n}\n\n/** @internal */\nexport type ActionUpdate =\n    | {\n          /** Replace all existing scheduled actions with this new array */\n          replace: Action[];\n      }\n    | {\n          /** Add these actions to the existing scheduled actions */\n          insert: Action[];\n      }\n    | EmptyObject;\n\n/**\n * This scheduler tracks the state of the current membership participation\n * and runs one central timer that wakes up a handler callback with the correct action + state\n * whenever necessary.\n *\n * It can also be awakened whenever a new action is added which is\n * earlier then the current \"next awake\".\n * @internal\n */\nexport class ActionScheduler {\n    /**\n     * This is tracking the state of the scheduler loop.\n     * Only used to prevent starting the loop twice.\n     */\n    public running = false;\n\n    public constructor(\n        /** This is the callback called for each scheduled action (`this.addAction()`) */\n        private membershipLoopHandler: (type: MembershipActionType) => Promise<ActionUpdate>,\n    ) {}\n\n    // function for the wakeup mechanism (in case we add an action externally and need to leave the current sleep)\n    private wakeup: (update: ActionUpdate) => void = (update: ActionUpdate): void => {\n        logger.error(\"Cannot call wakeup before calling `startWithJoin()`\");\n    };\n    private _actions: Action[] = [];\n    public get actions(): Action[] {\n        return this._actions;\n    }\n\n    /**\n     * This starts the main loop of the membership manager that handles event sending, delayed event sending and delayed event restarting.\n     * @param initialActions The initial actions the manager will start with. It should be enough to pass: DelayedLeaveActionType.Initial\n     * @returns Promise that resolves once all actions have run and no more are scheduled.\n     * @throws This throws an error if one of the actions throws.\n     * In most other error cases the manager will try to handle any server errors by itself.\n     */\n    public async startWithJoin(): Promise<void> {\n        if (this.running) {\n            logger.error(\"Cannot call startWithJoin() on NewMembershipActionScheduler while already running\");\n            return;\n        }\n        this.running = true;\n        this._actions = [{ ts: Date.now(), type: MembershipActionType.SendDelayedEvent }];\n        try {\n            while (this._actions.length > 0) {\n                // Sort so next (smallest ts) action is at the beginning\n                this._actions.sort((a, b) => a.ts - b.ts);\n                const nextAction = this._actions[0];\n                let wakeupUpdate: ActionUpdate | undefined = undefined;\n\n                // while we await for the next action, wakeup has to resolve the wakeupPromise\n                const wakeupPromise = new Promise<void>((resolve) => {\n                    this.wakeup = (update: ActionUpdate): void => {\n                        wakeupUpdate = update;\n                        resolve();\n                    };\n                });\n                if (nextAction.ts > Date.now()) await Promise.race([wakeupPromise, sleep(nextAction.ts - Date.now())]);\n\n                let handlerResult: ActionUpdate = {};\n                if (!wakeupUpdate) {\n                    logger.debug(\n                        `Current MembershipManager processing: ${nextAction.type}\\nQueue:`,\n                        this._actions,\n                        `\\nDate.now: \"${Date.now()}`,\n                    );\n                    try {\n                        // `this.wakeup` can also be called and sets the `wakeupUpdate` object while we are in the handler.\n                        handlerResult = await this.membershipLoopHandler(nextAction.type as MembershipActionType);\n                    } catch (e) {\n                        throw Error(`The MembershipManager shut down because of the end condition: ${e}`);\n                    }\n                }\n                // remove the processed action only after we are done processing\n                this._actions.splice(0, 1);\n                // The wakeupUpdate always wins since that is a direct external update.\n                const actionUpdate = wakeupUpdate ?? handlerResult;\n\n                if (\"replace\" in actionUpdate) {\n                    this._actions = actionUpdate.replace;\n                } else if (\"insert\" in actionUpdate) {\n                    this._actions.push(...actionUpdate.insert);\n                }\n            }\n        } finally {\n            // Set the rtc session running state since we cannot recover from here and the consumer user of the\n            // MatrixRTCSession class needs to manually rejoin.\n            this.running = false;\n        }\n\n        logger.debug(\"Leave MembershipManager ActionScheduler loop (no more actions)\");\n    }\n\n    public initiateJoin(): void {\n        this.wakeup?.({ replace: [{ ts: Date.now(), type: MembershipActionType.SendDelayedEvent }] });\n    }\n    public initiateLeave(): void {\n        this.wakeup?.({ replace: [{ ts: Date.now(), type: MembershipActionType.SendScheduledDelayedLeaveEvent }] });\n    }\n}\n"],"mappings":"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","ignoreList":[]}